{"version":3,"sources":["images/1.png","images/2.png","images/3.png","images/4.png","images/5.png","images/6.png","images/7.png","images/8.png","images/9.png","getWeb3.js","Main.js","Tutorial.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Input","name","id","value","onChange","type","placeholder","className","Button","onClick","Form","nameTxt","idTxt","nameBtn","idBtn","Display","title","counter","Main","config","useState","idAdd","setAddId","addressAdd","setAddAddress","idListen","setListenId","addressArtist","setArtist","idMusic","setMusic","idMusicUser","setUser","counterArtist","setCounterArtist","counterMusic","setCounterMusic","counterUser","setCounterUser","addMusic","accounts","contract","methods","send","from","listenMusic","musicStats","call","response","artistStats","musicianStats","userStats","href","e","target","Card","image","instruction","class","src","alt","Tutorial","tutorial1","tutorial2","tutorial3","tutorial4","tutorial5","tutorial6","tutorial7","tutorial8","tutorial9","App","state","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","StreamingService","networks","instance","Contract","abi","address","setState","runExample","alert","error","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a79f77d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.ae958b77.png\";","module.exports = __webpack_public_path__ + \"static/media/2.8a839e5a.png\";","module.exports = __webpack_public_path__ + \"static/media/3.45c6c5f3.png\";","module.exports = __webpack_public_path__ + \"static/media/4.f347678b.png\";","module.exports = __webpack_public_path__ + \"static/media/5.84ed76f7.png\";","module.exports = __webpack_public_path__ + \"static/media/6.c3c66067.png\";","module.exports = __webpack_public_path__ + \"static/media/7.f2a4dce8.png\";","module.exports = __webpack_public_path__ + \"static/media/8.0772010c.png\";","module.exports = __webpack_public_path__ + \"static/media/9.f15cb8e7.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { useState } from 'react'\n\nfunction Input({ name, id, value, onChange }) {\n    return (\n        <input type=\"text\" value={value} onChange={onChange} placeholder={name} className=\"form-control\" id={id} />\n    );\n}\n\nfunction Button({ name, id, onClick }) {\n    return (\n        <div className=\"input-group-append\">\n            <button className=\"btn btn-info\" onClick={onClick} type=\"button\" id={id}>{name}</button>\n        </div>\n    );\n}\n\nfunction Form({ nameTxt, idTxt, nameBtn, idBtn, onClick, value, onChange }) {\n    return (\n        <>\n            <div className=\"input-group mb-3\">\n                <Input name={nameTxt} id={idTxt} value={value} onChange={onChange} />\n                <Button name={nameBtn} id={idBtn} onClick={onClick} />\n            </div>\n        </>\n    );\n}\n\nfunction Display({ id, title, counter }) {\n    return (\n        <div id=\"display\">\n            <div><p id=\"titleStats\"> {title} </p></div> <br />\n            <div id='circle'>\n                <p className='counter' id={id}>{counter}</p>\n                <p>vezes</p>\n            </div>\n        </div>\n    );\n}\n\nconst Main = ({ config }) => {\n    const [idAdd, setAddId] = useState(\"\");\n    const [addressAdd, setAddAddress] = useState(\"\");\n    const [idListen, setListenId] = useState(\"\");\n    const [addressArtist, setArtist] = useState(\"\");\n    const [idMusic, setMusic] = useState(\"\");\n    const [idMusicUser, setUser] = useState(\"\");\n\n    const [counterArtist, setCounterArtist] = useState(0);\n    const [counterMusic, setCounterMusic] = useState(0);\n    const [counterUser, setCounterUser] = useState(0);\n\n    const addMusic = async ({ accounts, contract }) => {\n        //add a music with id and artist address in smart contract.\n        await contract.methods.addMusic(idAdd, addressAdd).send({ from: accounts[0] });\n    };\n\n    const listenMusic = async ({ accounts, contract }) => {\n        await contract.methods.listenMusic(idListen).send({ from: accounts[0] });\n    };\n\n    const musicStats = async ({ contract }) => {\n        // Get the value from the contract to prove it worked.\n        const response = await contract.methods.musicStats(idMusic).call();\n        setCounterMusic(response);\n    };\n\n    const artistStats = async ({ contract }) => {\n        // Get the value from the contract to prove it worked.\n        const response = await contract.methods.musicianStats(addressArtist).call();\n        setCounterArtist(response);\n    };\n\n    const userStats = async ({ accounts, contract }) => {\n        // Get the value from the contract to prove it worked.\n        const response = await contract.methods.userStats(idMusicUser).call({ from: accounts[0] });\n        setCounterUser(response);\n    };\n\n    return (\n        <>\n            <div>\n                <div id=\"header\">\n                    <div id='logo'>\n                        <h1>BLOCK</h1>\n                        <h1 id=\"fy\">FY</h1>\n                    </div>\n                    <div id=\"etherscan\">\n                        <a href=\"https://rinkeby.etherscan.io/address/0x22b5bd3a5cd61677e7c2de7b06e7d262444b02dd\">Rastrear pelo Etherscan</a>\n                    </div>\n                </div>\n            </div>\n            <br />\n\n            <div id='form'>\n                <div className=\"input-group mb-3\">\n                    <Input value={idAdd} onChange={(e) => setAddId(e.target.value)} name=\"ID da música\" id=\"txtMscAdd\" />\n                    <Input value={addressAdd} onChange={(e) => setAddAddress(e.target.value)} name=\"Address do artista\" id=\"txtArtAdd\" />\n                    <Button name=\"Adicionar música\" id=\"btnAdd\" onClick={() => addMusic(config)} />\n                </div>\n\n                <Form value={idListen} nameTxt=\"ID da música\" idTxt=\"txtListen\" nameBtn=\"Escutar música\" idBtn=\"btnListen\" onChange={(e) => setListenId(e.target.value)} onClick={() => listenMusic(config)} />\n                <Form value={addressArtist} nameTxt=\"Address do artista\" idTxt=\"txtArt\" nameBtn=\"Estatísticas do artista\" idBtn=\"btnArt\" onChange={(e) => setArtist(e.target.value)} onClick={() => artistStats(config)} />\n                <Form value={idMusic} nameTxt=\"ID da música\" idTxt=\"txtMsc\" nameBtn=\"Estatísticas da música\" idBtn=\"btnMsc\" onChange={(e) => setMusic(e.target.value)} onClick={() => musicStats(config)} />\n                <Form value={idMusicUser} nameTxt=\"ID da música\" idTxt=\"txtUsr\" nameBtn=\"Suas estatísticas\" idBtn=\"btnUsr\" onChange={(e) => setUser(e.target.value)} onClick={() => userStats(config)} />\n            </div>\n            <br />\n\n            <div id='exibidor'>\n                <Display title=\"O artista foi tocado:\" id=\"artist\" counter={counterArtist} />\n                <Display title=\"A música foi tocada:\" id=\"music\" counter={counterMusic} />\n                <Display title=\"Você ouviu esta música:\" id=\"user\" counter={counterUser} />\n            </div>\n        </>\n    )\n}\n\nexport default Main","import React, { useState } from 'react';\nimport tutorial1 from \"./images/1.png\";\nimport tutorial2 from \"./images/2.png\";\nimport tutorial3 from \"./images/3.png\";\nimport tutorial4 from \"./images/4.png\";\nimport tutorial5 from \"./images/5.png\";\nimport tutorial6 from \"./images/6.png\";\nimport tutorial7 from \"./images/7.png\";\nimport tutorial8 from \"./images/8.png\";\nimport tutorial9 from \"./images/9.png\";\n\nfunction Card({ image, instruction }) {\n    return (\n        <div class=\"card\">\n            <div class=\"card-body\">\n                <p class=\"card-text\">{instruction}</p>\n            </div>\n            <img class=\"card-img-top\" src={image} alt=\"Imagem de capa do card\" />\n        </div>\n    );\n}\n\nconst Tutorial = () => {\n    return (\n        <div id=\"tutorial\">\n            <br />\n            <div className=\"titleTutorial\">\n                <img src=\"https://lh3.googleusercontent.com/AWXpXmPH-dW_tkkj1eKu4EYA_HUE76CvMyYHp_MhiWbvS5VpgJWsC1pDRpbocc3EmGwELvh4A2g=w128-h128-e365\" />\n                <h1>Tutorial do Metamask:</h1>\n            </div>\n\n            <br />\n            <div id=\"manualMetamask\">\n                <Card image={tutorial1} instruction=\"1. Na loja do seu navegador pesquise pela extensão Metamask\" />\n                <Card image={tutorial2} instruction=\"2. Clique em adicionar extensão\" />\n                <Card image={tutorial3} instruction=\"3. Abrirá a tela de boas vindas, clique em próximos passos\" />\n                <Card image={tutorial4} instruction=\"4. (Se não tiver) crie uma carteira metamask\" />\n                <Card image={tutorial5} instruction=\"5. O Metamask dirá o que ele terá acesso em sua máquina, clique em I agree para a aplicação funcionar\" />\n                <Card image={tutorial6} instruction=\"6. Crie uma senha de no mínimo 8 caracteres e marque a caixinha dos termos de uso\" />\n                <Card image={tutorial7} instruction=\"7. Aparecerá um jogo de palavras que é uma chave de backup, veja se quiser, mas pode pular (é possível recuperar essa chave depois)\" />\n                <Card image={tutorial8} instruction=\"8. O Metamask abrirá a tela inicial\" />\n                <Card image={tutorial9} instruction=\"9. Troque para a Rede de Testes Rinkeby e dê F5 para abrir a aplicação\" />\n            </div>\n            <br />\n        </div>\n    )\n}\n\nexport default Tutorial","import React, { Component } from \"react\";\nimport StreamingService from \"./contracts/StreamingService.json\";\nimport getWeb3 from \"./getWeb3\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./App.css\";\nimport \"./main.css\";\nimport Main from \"./Main\";\nimport Tutorial from \"./Tutorial\";\n\nclass App extends Component {\n        state = { web3: null, accounts: null, contract: null };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = StreamingService.networks[networkId];\n      const instance = new web3.eth.Contract(\n        StreamingService.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance }, this.runExample);\n    } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details. (Possível solução: verifique se a extensão Metamask está instalada e se está conectada a rede de testes Rinkeby)`,\n        );\n      console.error(error);\n    }\n  };\n\n  render() {\n    if (!this.state.web3) {\n      return (\n        <Tutorial />\n      );\n    }\n    return (\n      <div className=\"App\">\n        <br />\n        <Main config={{ accounts: this.state.accounts, contract: this.state.contract }} />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}